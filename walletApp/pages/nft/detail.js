import React, { useEffect, useState } from "react";
import {
  Box,
  Flex,
  Heading,
  Text,
  Button,
  SimpleGrid,
  Image,
  Spinner,
} from "@chakra-ui/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useDispatch, useSelector } from "react-redux";
import { fetchNftDetail, selectNftDetail } from "../../store/slices/NftSlice";
import {generateNftUrlWrapper, genrateNftUrl, parseIpfsObject} from "../../utils";
import { isEmpty } from "@chakra-ui/utils";
import { openModal } from "../../store/slices/ModalSlice";
import { NftTransferHistoryTable } from "../../containers/table/transferHistoryTable";
import {ArrowBackIcon} from "@chakra-ui/icons";

export default function detail() {
  const router = useRouter();
  const { id, nftAddress, filter } = router.query;
  const dispatch = useDispatch();
  const nftDetail = useSelector(selectNftDetail);
  const [nftMetaData, setNftMetaData] = useState({});
  const [nftMetaDataKeys, setNftMetaDataKeys] = useState([]);
  const [parsedIpfsJson, setParsedIpfsJson] = useState([]);

  useEffect(() => {
    if (router.isReady) {
      try {
        dispatch(
          fetchNftDetail({
            tokenAddress: nftAddress,
            id,
          })
        );
      } catch (error) {
        console.log(error);
      }
    }
  }, [router.isReady]);

  useEffect(() => {
    if (!isEmpty(nftDetail)) {
      if (nftDetail.details?.hasOwnProperty("ipfs_data_json")) {
        // console.log("this is d",nftDetail?.details)
        setNftMetaData(nftDetail?.details?.ipfs_data_object);
        setParsedIpfsJson(parseIpfsObject(nftDetail?.details?.ipfs_data_object))
      } else {
        setNftMetaData({});
      }
    }
  }, [nftDetail]);

  useEffect(() => {
    if (!isEmpty(nftMetaData)) {
      setNftMetaDataKeys(Object.keys(nftMetaData));
    }
  }, [nftMetaData]);

  return (
    <>
      {nftDetail?.details ? (
        <>
          <Head>
            <title>NFTs</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Flex alignItems={"start"} gap={"20px"} pb={"50px"}>
            <Box flex="1">
              <Flex mb={"17px"}>
                <Button
                    me={"16px"}
                    p={"0"}
                    w={"40px"}
                    h={"40px"}
                    variant="outline"
                    size="lg"
                    onClick={() => filter =='Sort by' ? router.back() : router.push(`/nft?filter=${filter}`)}
                >
                  <ArrowBackIcon boxSize={26} />
                </Button>
                <Heading
                  mr={"auto"}
                  mb={["20px", "20px", "0", "0"]}
                  as={"h3"}
                  size={"md"}
                >
                  NFT Details
                </Heading>
              </Flex>
              {!isEmpty(nftDetail) && (
                <>
                  <Flex gap={4} flexDirection={{ base: "column", md: "row" }}>
                    <Box
                      border={"1px solid"}
                      borderColor={"#35245A"}
                      bg={"#140533"}
                      borderRadius={"26px"}
                      padding={"30px"}
                      width={{ base: "100%", md: "40%" }}
                      display={"flex"}
                      alignItems={"center"}
                      justifyContent={"center"}
                    >
                      <Image
                        m={"auto"}
                        // src={genrateNftUrl(nftDetail?.details?.ipfs_data_object?.image)}
                        src={generateNftUrlWrapper(nftDetail?.details?.ipfs_data_object,nftDetail?.details?.token_uri)}
                        alt="Image"
                        borderRadius="lg"
                        maxWidth={"100%"}
                      />
                    </Box>
                    <Box width={{ base: "100%", md: "60%" }}>
                      <Flex
                        mb={"17px"}
                        borderBottom={"1px solid"}
                        borderColor={"#35245A"}
                        paddingBottom={"10px"}
                      >
                        <Heading
                          mr={"auto"}
                          mb={["20px", "20px", "0", "0"]}
                          as={"h3"}
                          size={"md"}
                        >
                          {parsedIpfsJson.full_title}
                        </Heading>
                        <Button
                          onClick={() =>
                            dispatch(
                              openModal({
                                modal: "TransferNftModal",
                                props: {
                                  nft: {
                                    nft: nftDetail,
                                    name:
                                    parsedIpfsJson.full_title,
                                    image_url: genrateNftUrl( nftDetail?.details?.ipfs_data_object?.image ),
                                    tokenId: nftDetail?.details?.id,
                                    tokenAddress:
                                      nftDetail?.details?.contract_address,
                                  },
                                },
                              })
                            )
                          }
                          mb={["24px", "24px", "0", "0"]}
                          variant="outline"
                          size="lg"
                        >
                          TRANSFER
                        </Button>
                      </Flex>
                      <SimpleGrid
                        columns={[1, 2, 2, 2, 1, 3]}
                        spacing="40px"
                        mb={"17px"}
                        borderBottom={"1px solid"}
                        borderColor={"#35245A"}
                        paddingBottom={"10px"}
                      >
                        <Box>
                          <Text fontSize={"16px"} color={"#9EA5B4"}>
                            {" "}
                            ID
                          </Text>
                          <Text
                              mr={"auto"}
                              mb={["20px", "20px", "0", "0"]}
                              size={"md"}
                          >
                            {nftDetail?.details?.id}
                          </Text>
                        </Box>
                        <Box>
                          <Text fontSize={"16px"} color={"#9EA5B4"}>
                            {" "}
                            Title
                          </Text>
                          <Text
                              mr={"auto"}
                              mb={["20px", "20px", "0", "0"]}
                              fontSize={"18px"}
                          >
                            {parsedIpfsJson.full_title}
                          </Text>
                        </Box>
                        <Box>
                          <Text fontSize={"16px"} color={"#9EA5B4"}>
                            {" "}
                            Contact Address
                          </Text>
                          <Text
                            mr={"auto"}
                            mb={["20px", "20px", "0", "0"]}
                            size={"md"}
                          >
                            {nftDetail?.details?.contract_address.slice(0, 5)}{"..."}{nftDetail?.details?.contract_address.slice(nftDetail?.details?.contract_address.length-5)}
                          </Text>
                        </Box>
                      </SimpleGrid>
                      <SimpleGrid
                        columns={[2, null, 3]}
                        spacing="40px"
                        mb={"17px"}
                      >
                        {nftMetaDataKeys?.map((key, index) => {
                          return (
                            <>
                              {key !== "image" &&
                              key !== "Title" &&
                              key !== "title" &&
                              key !== "name" &&
                              key !== "Name" &&
                              key !== "image_url" ? (
                                <Box>
                                  <Text fontSize={"16px"} color={"#9EA5B4"}>
                                    {key}
                                  </Text>
                                  <Text
                                    mr={"auto"}
                                    mb={["20px", "20px", "0", "0"]}
                                    fontSize={"18px"}
                                  >
                                    {nftMetaData[key]?.length > 10
                                      ? nftMetaData[key]?.slice(0, 5) +
                                        "..." +
                                        nftMetaData[key]?.slice(
                                          nftMetaData[key].length - 5
                                        )
                                      : nftMetaData[key]}
                                  </Text>
                                </Box>
                              ) : (
                                ""
                              )}
                            </>
                          );
                        })}
                      </SimpleGrid>
                    </Box>
                  </Flex>
                </>
              )}
            </Box>
          </Flex>
          <Box w="100%">
            <NftTransferHistoryTable id={id} tokenAddress={nftAddress} />
          </Box>
        </>
      ) : (
        <Flex justifyContent="center">
          <Spinner size="md" alignItems="center" />
        </Flex>
      )}
    </>
  );
}
